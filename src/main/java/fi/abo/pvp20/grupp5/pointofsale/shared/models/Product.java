package fi.abo.pvp20.grupp5.pointofsale.shared.models;

import java.beans.ConstructorProperties;
import java.time.LocalDateTime;
import java.time.chrono.ChronoLocalDate;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;

/**
 * The product class representation
 */
public class Product {

    private final String productName;
    private final String barcode;
    private final List<String> keywords;
    private double vatPercentage;

    private int netPrice;
    private List<SpecialOffer> specialOffers;

    public Product(String productName, String barcode, List<String> keywords, double vatPercentage, int netPrice) {
        this(productName, barcode, keywords, vatPercentage, netPrice, Collections.emptyList());
    }

    /**
     * The Product's constructor
     * @param productName The name of the product
     * @param barcode The product's barcode
     * @param keywords The keywords associated with the product
     * @param vatPercentage The VAT percentage
     * @param netPrice The net price
     * @param specialOffers Any special offers associated with the product
     */
    @ConstructorProperties({"productName", "barcode", "keywords", "vatPercentage", "netPrice", "specialOffers"})
    public Product(String productName, String barcode, List<String> keywords, double vatPercentage, int netPrice, List<SpecialOffer> specialOffers) {
        this.productName = productName;
        this.barcode = barcode;
        this.keywords = keywords;
        this.vatPercentage = vatPercentage;
        this.netPrice = netPrice;
        this.specialOffers = specialOffers;
    }

    public String getProductName() {
        return productName;
    }

    public String getBarcode() {
        return barcode;
    }

    public List<String> getKeywords() {
        return keywords;
    }

    public int getNetPrice() {
        return netPrice;
    }

    public boolean changeNetPrice(int newPrice) {
        if (newPrice < 0.0) {
            return false;
        } else {
            netPrice = newPrice;
            return true;
        }
    }

    /**
     * Gets the best valid discount
     *
     * @param bonusCustomer Optional bonus customer
     * @return
     */
    public double getDiscountPercentage(BonusCustomer bonusCustomer) {
        if (specialOffers == null) return 0;
        ChronoLocalDate now = ChronoLocalDate.from(LocalDateTime.now());
        return specialOffers.stream()
                .filter(o -> !o.isForBonusCustomersOnly() || bonusCustomer != null)
                .filter(o -> o.getStartDate().isBefore(now) && o.getEndDate().plusDays(1).isAfter(now))
                .map(SpecialOffer::getDiscountPercentage)
                .max(Comparator.naturalOrder()).orElse(0.0);
    }

    public List<SpecialOffer> getSpecialOffers() {
        return specialOffers;
    }

    public void setSpecialOffers(List<SpecialOffer> specialOffers) {
        this.specialOffers = specialOffers;
    }

    public double getVatPercentage() {
        return vatPercentage;
    }

    public boolean changeVatPercentage(double newVatPercentage) {
        if (newVatPercentage < 0.0) {
            return false;
        } else {
            vatPercentage = newVatPercentage;
            return true;
        }
    }

    @Override
    // Autogenerated by Intellij
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Product product = (Product) o;
        return barcode.equals(product.barcode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(barcode);
    }

    @Override
    public String toString() {
        return productName;
    }
}
